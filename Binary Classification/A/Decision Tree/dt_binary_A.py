# -*- coding: utf-8 -*-
"""DT-Regression-por

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWyqujxFENiK0V8aHE03biglMe_hILGd
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import graphviz
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv('student-por.csv', sep=';')

# Convert G3 into binary classification: Pass (>=10) or Fail (<10)
data['G3_binary'] = (data['G3'] >= 10).astype(int)

# Encode categorical variables as numeric
data_encoded = pd.get_dummies(data, drop_first=True)

# Define features (all features + G1 + G2) and target
features = list(data_encoded.columns)
features.remove('G3')       # Remove original G3
features.remove('G3_binary')  # Keep G3_binary as the target
X = data_encoded[features]
y = data_encoded['G3_binary']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Decision Tree Classifier
classifier = DecisionTreeClassifier(random_state=42, max_depth=2)  # Start with max_depth=4
classifier.fit(X_train, y_train)

# Make predictions
y_pred = classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1:.2f}")
print("Confusion Matrix:")
print(conf_matrix)

# Visualize the confusion matrix as a heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=["Fail", "Pass"], yticklabels=["Fail", "Pass"])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Visualize the decision tree
dot_data = export_graphviz(
    classifier,
    out_file=None,
    feature_names=features,
    class_names=["Fail", "Pass"],
    filled=True,
    rounded=True,
    special_characters=True
)
graph = graphviz.Source(dot_data)
graph.render("decision_tree_binary_case_A", format="png", cleanup=True)
print("Binary classification decision tree visualization saved as 'decision_tree_binary_case_A.png'.")