# -*- coding: utf-8 -*-
"""dt_5_class_classification-math

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-mwWugHaR56nmP99Dy5cNqX1WZfwwv7
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_text
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt
import graphviz
from sklearn.tree import export_graphviz

# Load the Math dataset
data = pd.read_csv('student-mat.csv', sep=';')

# Create 5-class target variable based on G3
data['G3_class'] = pd.cut(data['G3'], bins=[0, 9, 11, 13, 15, 20], labels=['Fail', 'Sufficient', 'Satisfactory', 'Good', 'Excellent'], right=False)

# Handle missing values for numeric columns
numeric_columns = data.select_dtypes(include=['float64', 'int64']).columns
data[numeric_columns] = data[numeric_columns].fillna(0)  # Replace NaN in numeric columns with 0

# Handle missing values for categorical columns
categorical_columns = data.select_dtypes(include=['object', 'category']).columns
data[categorical_columns] = data[categorical_columns].fillna(data[categorical_columns].mode().iloc[0])  # Replace NaN in categorical columns with mode

# Define features and target
X = data.drop(columns=['G3', 'G3_class'])
y = data['G3_class']

# One-hot encode categorical features
X = pd.get_dummies(X, drop_first=True)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a Decision Tree Classifier
dt_classifier = DecisionTreeClassifier(random_state=42, max_depth=4)
dt_classifier.fit(X_train, y_train)

# Make predictions
y_pred = dt_classifier.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

# Visualize the Decision Tree (Graphviz for detailed view)
feature_names = X.columns
class_names = ['Fail', 'Sufficient', 'Satisfactory', 'Good', 'Excellent']

dot_data = export_graphviz(
    dt_classifier,
    out_file=None,
    feature_names=feature_names,
    class_names=class_names,
    filled=True,
    rounded=True,
    special_characters=True
)
graph = graphviz.Source(dot_data)
graph.render("decision_tree_5_class_math", format="png", cleanup=True)
print("Decision Tree visualization saved as 'decision_tree_5_class_math.png'.")